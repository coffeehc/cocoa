#import <stdbool.h>
#import <stdlib.h>
#import <utils.h>
#import <Appkit/Appkit.h>

void* C_Cell_Alloc();

void* C_NSCell_InitImageCell(void* ptr, void* image);
void* C_NSCell_InitTextCell(void* ptr, void* _string);
void* C_NSCell_Init(void* ptr);
void* C_NSCell_InitWithCoder(void* ptr, void* coder);
void C_NSCell_SetCellAttribute_To(void* ptr, unsigned int parameter, int value);
int C_NSCell_CellAttribute(void* ptr, unsigned int parameter);
void C_NSCell_SetNextState(void* ptr);
void* C_NSCell_SetUpFieldEditorAttributes(void* ptr, void* textObj);
void* C_NSCell_MenuForEvent_InRect_OfView(void* ptr, void* event, CGRect cellFrame, void* view);
int C_NSCell_Compare(void* ptr, void* otherCell);
void C_NSCell_PerformClick(void* ptr, void* sender);
void C_NSCell_TakeObjectValueFrom(void* ptr, void* sender);
void C_NSCell_TakeIntegerValueFrom(void* ptr, void* sender);
void C_NSCell_TakeIntValueFrom(void* ptr, void* sender);
void C_NSCell_TakeStringValueFrom(void* ptr, void* sender);
void C_NSCell_TakeDoubleValueFrom(void* ptr, void* sender);
void C_NSCell_TakeFloatValueFrom(void* ptr, void* sender);
bool C_NSCell_TrackMouse_InRect_OfView_UntilMouseUp(void* ptr, void* event, CGRect cellFrame, void* controlView, bool flag);
bool C_NSCell_StartTrackingAt_InView(void* ptr, CGPoint startPoint, void* controlView);
bool C_NSCell_ContinueTracking_At_InView(void* ptr, CGPoint lastPoint, CGPoint currentPoint, void* controlView);
void C_NSCell_StopTracking_At_InView_MouseIsUp(void* ptr, CGPoint lastPoint, CGPoint stopPoint, void* controlView, bool flag);
unsigned int C_NSCell_HitTestForEvent_InRect_OfView(void* ptr, void* event, CGRect cellFrame, void* controlView);
void C_NSCell_ResetCursorRect_InView(void* ptr, CGRect cellFrame, void* controlView);
Array C_NSCell_DraggingImageComponentsWithFrame_InView(void* ptr, CGRect frame, void* view);
void C_NSCell_DrawFocusRingMaskWithFrame_InView(void* ptr, CGRect cellFrame, void* controlView);
CGRect C_NSCell_FocusRingMaskBoundsForFrame_InView(void* ptr, CGRect cellFrame, void* controlView);
void C_NSCell_CalcDrawInfo(void* ptr, CGRect rect);
CGSize C_NSCell_CellSizeForBounds(void* ptr, CGRect rect);
CGRect C_NSCell_DrawingRectForBounds(void* ptr, CGRect rect);
CGRect C_NSCell_ImageRectForBounds(void* ptr, CGRect rect);
CGRect C_NSCell_TitleRectForBounds(void* ptr, CGRect rect);
void C_NSCell_DrawWithFrame_InView(void* ptr, CGRect cellFrame, void* controlView);
void* C_NSCell_HighlightColorWithFrame_InView(void* ptr, CGRect cellFrame, void* controlView);
void C_NSCell_DrawInteriorWithFrame_InView(void* ptr, CGRect cellFrame, void* controlView);
void C_NSCell_Highlight_WithFrame_InView(void* ptr, bool flag, CGRect cellFrame, void* controlView);
void C_NSCell_EditWithFrame_InView_Editor_Delegate_Event(void* ptr, CGRect rect, void* controlView, void* textObj, void* delegate, void* event);
void C_NSCell_SelectWithFrame_InView_Editor_Delegate_Start_Length(void* ptr, CGRect rect, void* controlView, void* textObj, void* delegate, int selStart, int selLength);
void C_NSCell_EndEditing(void* ptr, void* textObj);
void* C_NSCell_FieldEditorForView(void* ptr, void* controlView);
CGRect C_NSCell_ExpansionFrameWithFrame_InView(void* ptr, CGRect cellFrame, void* view);
void C_NSCell_DrawWithExpansionFrame_InView(void* ptr, CGRect cellFrame, void* view);
void* C_NSCell_ObjectValue(void* ptr);
void C_NSCell_SetObjectValue(void* ptr, void* value);
bool C_NSCell_HasValidObjectValue(void* ptr);
int C_NSCell_IntegerValue(void* ptr);
void C_NSCell_SetIntegerValue(void* ptr, int value);
void* C_NSCell_StringValue(void* ptr);
void C_NSCell_SetStringValue(void* ptr, void* value);
double C_NSCell_DoubleValue(void* ptr);
void C_NSCell_SetDoubleValue(void* ptr, double value);
float C_NSCell_FloatValue(void* ptr);
void C_NSCell_SetFloatValue(void* ptr, float value);
unsigned int C_NSCell_Type(void* ptr);
void C_NSCell_SetType(void* ptr, unsigned int value);
bool C_NSCell_IsEnabled(void* ptr);
void C_NSCell_SetEnabled(void* ptr, bool value);
bool C_NSCell_AllowsUndo(void* ptr);
void C_NSCell_SetAllowsUndo(void* ptr, bool value);
bool C_NSCell_IsBezeled(void* ptr);
void C_NSCell_SetBezeled(void* ptr, bool value);
bool C_NSCell_IsBordered(void* ptr);
void C_NSCell_SetBordered(void* ptr, bool value);
bool C_NSCell_IsOpaque(void* ptr);
int C_NSCell_BackgroundStyle(void* ptr);
void C_NSCell_SetBackgroundStyle(void* ptr, int value);
int C_NSCell_InteriorBackgroundStyle(void* ptr);
bool C_NSCell_AllowsMixedState(void* ptr);
void C_NSCell_SetAllowsMixedState(void* ptr, bool value);
int C_NSCell_NextState(void* ptr);
int C_NSCell_State(void* ptr);
void C_NSCell_SetState(void* ptr, int value);
bool C_NSCell_IsEditable(void* ptr);
void C_NSCell_SetEditable(void* ptr, bool value);
bool C_NSCell_IsSelectable(void* ptr);
void C_NSCell_SetSelectable(void* ptr, bool value);
bool C_NSCell_IsScrollable(void* ptr);
void C_NSCell_SetScrollable(void* ptr, bool value);
int C_NSCell_Alignment(void* ptr);
void C_NSCell_SetAlignment(void* ptr, int value);
void* C_NSCell_Font(void* ptr);
void C_NSCell_SetFont(void* ptr, void* value);
unsigned int C_NSCell_LineBreakMode(void* ptr);
void C_NSCell_SetLineBreakMode(void* ptr, unsigned int value);
bool C_NSCell_TruncatesLastVisibleLine(void* ptr);
void C_NSCell_SetTruncatesLastVisibleLine(void* ptr, bool value);
bool C_NSCell_Wraps(void* ptr);
void C_NSCell_SetWraps(void* ptr, bool value);
int C_NSCell_BaseWritingDirection(void* ptr);
void C_NSCell_SetBaseWritingDirection(void* ptr, int value);
void* C_NSCell_AttributedStringValue(void* ptr);
void C_NSCell_SetAttributedStringValue(void* ptr, void* value);
bool C_NSCell_AllowsEditingTextAttributes(void* ptr);
void C_NSCell_SetAllowsEditingTextAttributes(void* ptr, bool value);
bool C_NSCell_ImportsGraphics(void* ptr);
void C_NSCell_SetImportsGraphics(void* ptr, bool value);
void* C_NSCell_Title(void* ptr);
void C_NSCell_SetTitle(void* ptr, void* value);
void* C_NSCell_Action(void* ptr);
void C_NSCell_SetAction(void* ptr, void* value);
void* C_NSCell_Target(void* ptr);
void C_NSCell_SetTarget(void* ptr, void* value);
bool C_NSCell_IsContinuous(void* ptr);
void C_NSCell_SetContinuous(void* ptr, bool value);
void* C_NSCell_Image(void* ptr);
void C_NSCell_SetImage(void* ptr, void* value);
int C_NSCell_Tag(void* ptr);
void C_NSCell_SetTag(void* ptr, int value);
void* C_NSCell_Formatter(void* ptr);
void C_NSCell_SetFormatter(void* ptr, void* value);
void* C_NSCell_Cell_DefaultMenu();
void* C_NSCell_Menu(void* ptr);
void C_NSCell_SetMenu(void* ptr, void* value);
bool C_NSCell_AcceptsFirstResponder(void* ptr);
bool C_NSCell_ShowsFirstResponder(void* ptr);
void C_NSCell_SetShowsFirstResponder(void* ptr, bool value);
bool C_NSCell_RefusesFirstResponder(void* ptr);
void C_NSCell_SetRefusesFirstResponder(void* ptr, bool value);
void* C_NSCell_RepresentedObject(void* ptr);
void C_NSCell_SetRepresentedObject(void* ptr, void* value);
int C_NSCell_MouseDownFlags(void* ptr);
bool C_NSCell_Cell_PrefersTrackingUntilMouseUp();
void* C_NSCell_KeyEquivalent(void* ptr);
unsigned int C_NSCell_Cell_DefaultFocusRingType();
unsigned int C_NSCell_FocusRingType(void* ptr);
void C_NSCell_SetFocusRingType(void* ptr, unsigned int value);
CGSize C_NSCell_CellSize(void* ptr);
unsigned int C_NSCell_ControlSize(void* ptr);
void C_NSCell_SetControlSize(void* ptr, unsigned int value);
void* C_NSCell_ControlView(void* ptr);
void C_NSCell_SetControlView(void* ptr, void* value);
bool C_NSCell_IsHighlighted(void* ptr);
void C_NSCell_SetHighlighted(void* ptr, bool value);
bool C_NSCell_SendsActionOnEndEditing(void* ptr);
void C_NSCell_SetSendsActionOnEndEditing(void* ptr, bool value);
bool C_NSCell_WantsNotificationForMarkedText(void* ptr);
bool C_NSCell_UsesSingleLineMode(void* ptr);
void C_NSCell_SetUsesSingleLineMode(void* ptr, bool value);
int C_NSCell_UserInterfaceLayoutDirection(void* ptr);
void C_NSCell_SetUserInterfaceLayoutDirection(void* ptr, int value);
