#import <stdbool.h>
#import <stdlib.h>
#import <utils.h>
#import <Appkit/Appkit.h>

void* C_Document_Alloc();

void* C_NSDocument_Init(void* ptr);
bool C_NSDocument_CanConcurrentlyReadDocumentsOfType(void* typeName);
bool C_NSDocument_CanAsynchronouslyWriteToURL_OfType_ForSaveOperation(void* ptr, void* url, void* typeName, unsigned int saveOperation);
void C_NSDocument_UnblockUserInteraction(void* ptr);
bool C_NSDocument_Document_IsNativeType(void* _type);
Array C_NSDocument_WritableTypesForSaveOperation(void* ptr, unsigned int saveOperation);
void* C_NSDocument_FileNameExtensionForType_SaveOperation(void* ptr, void* typeName, unsigned int saveOperation);
void C_NSDocument_MakeWindowControllers(void* ptr);
void C_NSDocument_AddWindowController(void* ptr, void* windowController);
void C_NSDocument_RemoveWindowController(void* ptr, void* windowController);
void C_NSDocument_WindowControllerDidLoadNib(void* ptr, void* windowController);
void C_NSDocument_WindowControllerWillLoadNib(void* ptr, void* windowController);
void C_NSDocument_ShowWindows(void* ptr);
void C_NSDocument_SetWindow(void* ptr, void* window);
void* C_NSDocument_DefaultDraftName(void* ptr);
void C_NSDocument_EncodeRestorableStateWithCoder_BackgroundQueue(void* ptr, void* coder, void* queue);
void C_NSDocument_ScheduleAutosaving(void* ptr);
void C_NSDocument_BrowseDocumentVersions(void* ptr, void* sender);
void C_NSDocument_MoveDocumentToUbiquityContainer(void* ptr, void* sender);
void C_NSDocument_UpdateChangeCountWithToken_ForSaveOperation(void* ptr, void* changeCountToken, unsigned int saveOperation);
void C_NSDocument_UpdateChangeCount(void* ptr, unsigned int change);
void* C_NSDocument_ChangeCountTokenForSaveOperation(void* ptr, unsigned int saveOperation);
void C_NSDocument_EncodeRestorableStateWithCoder(void* ptr, void* coder);
void C_NSDocument_RestoreStateWithCoder(void* ptr, void* coder);
void C_NSDocument_InvalidateRestorableState(void* ptr);
bool C_NSDocument_PrepareSavePanel(void* ptr, void* savePanel);
void C_NSDocument_UpdateUserActivityState(void* ptr, void* activity);
bool C_NSDocument_ValidateUserInterfaceItem(void* ptr, void* item);
void C_NSDocument_PrintDocument(void* ptr, void* sender);
void C_NSDocument_RunPageLayout(void* ptr, void* sender);
void C_NSDocument_RevertDocumentToSaved(void* ptr, void* sender);
void C_NSDocument_SaveDocument(void* ptr, void* sender);
void C_NSDocument_SaveDocumentAs(void* ptr, void* sender);
void C_NSDocument_SaveDocumentTo(void* ptr, void* sender);
void C_NSDocument_Close(void* ptr);
void C_NSDocument_DuplicateDocument(void* ptr, void* sender);
void C_NSDocument_RenameDocument(void* ptr, void* sender);
void C_NSDocument_MoveDocument(void* ptr, void* sender);
void C_NSDocument_LockDocument(void* ptr, void* sender);
void C_NSDocument_UnlockDocument(void* ptr, void* sender);
bool C_NSDocument_PreparePageLayout(void* ptr, void* pageLayout);
bool C_NSDocument_ShouldChangePrintInfo(void* ptr, void* newPrintInfo);
void C_NSDocument_SaveDocumentToPDF(void* ptr, void* sender);
void C_NSDocument_PrepareSharingServicePicker(void* ptr, void* sharingServicePicker);
void* C_NSDocument_HandleCloseScriptCommand(void* ptr, void* command);
void* C_NSDocument_HandlePrintScriptCommand(void* ptr, void* command);
void* C_NSDocument_HandleSaveScriptCommand(void* ptr, void* command);
bool C_NSDocument_PresentError(void* ptr, void* error);
void* C_NSDocument_WillPresentError(void* ptr, void* error);
void C_NSDocument_WillNotPresentError(void* ptr, void* error);
void* C_NSDocument_FileURL(void* ptr);
void C_NSDocument_SetFileURL(void* ptr, void* value);
bool C_NSDocument_IsEntireFileLoaded(void* ptr);
void* C_NSDocument_FileModificationDate(void* ptr);
void C_NSDocument_SetFileModificationDate(void* ptr, void* value);
bool C_NSDocument_KeepBackupFile(void* ptr);
bool C_NSDocument_IsDraft(void* ptr);
void C_NSDocument_SetDraft(void* ptr, bool value);
void* C_NSDocument_FileType(void* ptr);
void C_NSDocument_SetFileType(void* ptr, void* value);
bool C_NSDocument_IsDocumentEdited(void* ptr);
bool C_NSDocument_IsInViewingMode(void* ptr);
Array C_NSDocument_Document_ReadableTypes();
Array C_NSDocument_Document_WritableTypes();
Array C_NSDocument_WindowControllers(void* ptr);
void* C_NSDocument_WindowNibName(void* ptr);
void* C_NSDocument_WindowForSheet(void* ptr);
void* C_NSDocument_DisplayName(void* ptr);
bool C_NSDocument_Document_AutosavesInPlace();
bool C_NSDocument_Document_AutosavesDrafts();
bool C_NSDocument_Document_PreservesVersions();
void* C_NSDocument_AutosavedContentsFileURL(void* ptr);
void C_NSDocument_SetAutosavedContentsFileURL(void* ptr, void* value);
void* C_NSDocument_AutosavingFileType(void* ptr);
bool C_NSDocument_AutosavingIsImplicitlyCancellable(void* ptr);
bool C_NSDocument_HasUnautosavedChanges(void* ptr);
void* C_NSDocument_BackupFileURL(void* ptr);
bool C_NSDocument_IsBrowsingVersions(void* ptr);
bool C_NSDocument_Document_UsesUbiquitousStorage();
void* C_NSDocument_UndoManager(void* ptr);
void C_NSDocument_SetUndoManager(void* ptr, void* value);
bool C_NSDocument_HasUndoManager(void* ptr);
void C_NSDocument_SetHasUndoManager(void* ptr, bool value);
Array C_NSDocument_Document_RestorableStateKeyPaths();
bool C_NSDocument_ShouldRunSavePanelWithAccessoryView(void* ptr);
void* C_NSDocument_FileTypeFromLastRunSavePanel(void* ptr);
bool C_NSDocument_FileNameExtensionWasHiddenInLastRunSavePanel(void* ptr);
void* C_NSDocument_UserActivity(void* ptr);
void C_NSDocument_SetUserActivity(void* ptr, void* value);
bool C_NSDocument_IsLocked(void* ptr);
void* C_NSDocument_PrintInfo(void* ptr);
void C_NSDocument_SetPrintInfo(void* ptr, void* value);
void* C_NSDocument_PDFPrintOperation(void* ptr);
bool C_NSDocument_AllowsDocumentSharing(void* ptr);
void* C_NSDocument_ObjectSpecifier(void* ptr);
void* C_NSDocument_LastComponentOfFileName(void* ptr);
void C_NSDocument_SetLastComponentOfFileName(void* ptr, void* value);
